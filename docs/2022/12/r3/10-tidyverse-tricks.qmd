---
title: "10 Handy Tidyverse Tricks in R"
subtitle: "R3: R for Researchers" 
format: gfm
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(stringr)
library(palmerpenguins)
```

# Disclaimers

References: 

- [R for data science (2e)](https://r4ds.hadley.nz/)
- [tidyverse](https://www.tidyverse.org/)
- [Eight R tidyverse for everyday data engineering](https://tomaztsql.wordpress.com/2022/07/14/eight-r-tidyverse-tips-for-everyday-data-engineering/)

Dataset: 

```{r}
?penguins
```



# 1. Tidy data 

- one column, one variable
- one row, one observation 
- one cell, one value

```{r}
penguins
glimpse(penguins)
```


# 2. Use native pipe ` |> ` for code readibility and chaining multiple functions

- passess object from left to right sides. 
- `|>` loses several features of `%>%` from magrittr package 
- native - reduce package dependencies 
- faster?? 

```{r}
## without pipe operator
count(
  rename(
    select(
      mutate(penguins, nonsense = paste(species, island)), 
        species, island, nonsense
    ), 
    species_name = species, 
    island_name = island
  ), 
  nonsense
)
```



```{r}
## a chain of random operations 
penguins |>  
  mutate(nonsense = paste(species, island)) |>  
  select(species, island, nonsense) |> 
  rename(species_name = species, 
         island_name = island) |> 
  count(nonsense)
```

```{r}
## use inner piping inside mutate
penguins |>  
  mutate(
    species_new = species |>
      str_to_title() |> 
      str_to_sentence() |> 
      str_to_upper() |> 
      str_to_lower()
  ) |>  
  select(species, species_new)
```


# 3. Rename variables on select() 

- quick renaming on the same function
- no separate call for rename() 

```{r}
penguins |> 
  rename(species_name = species, 
         island_name = island)

penguins |> 
  select(species_name = species, island_name = island)
```

# 4. Operations across() multiple columns at once

- tidy evaluation can be used: like everything(), starts_with()
- for multiple elements, c() need to be used. 

```{r}
penguins |>  
  mutate(
    bill_length_mm = as.character(bill_length_mm), 
    bill_depth_mm = as.character(bill_depth_mm), 
    flipper_length_mm = as.character(flipper_length_mm)
  )
```

```{r}
penguins |> 
  mutate(across(c(bill_length_mm:flipper_length_mm), ~ as.character(.x))) |> 
  glimpse()
```

# 5. rowwise() & c_across() for row-wise operations

```{r}
## find row means for bill_length_mm, bill_depth_mm, and flipper_length_mm
penguins |>  
  rowwise() |>
  mutate(means = mean(c(bill_length_mm, bill_depth_mm, flipper_length_mm), na.rm = TRUE))
```
```{r}
## find row sums for bill_length_mm, bill_depth_mm, and flipper_length_mm
penguins |> 
  rowwise() |>
  mutate(sums = sum(c(bill_length_mm, bill_depth_mm, flipper_length_mm), na.rm = TRUE))
```

Use `c_across()` for tidy evaluation like everything(), starts_with(). 
```{r}
## find row sums for bill_length_mm, bill_depth_mm, and flipper_length_mm
penguins |> 
  rowwise() |>
  mutate(sums = sum(c_across(bill_length_mm:flipper_length_mm), na.rm = TRUE))
```
```{r}
## find row sums for bill_length_mm, bill_depth_mm, and flipper_length_mm
penguins |> 
  rowwise() |>
  mutate(sums = sum(c_across(ends_with("_mm")), na.rm = TRUE))
```



# 6. Vectorize with case_when() instead of ifelse() / if_else() 

- faster with vectorization 
- write multiple statements

```{r}
penguins |> 
  mutate(
    sex = case_when(
      sex == "male" ~ "M", 
      sex == "female" ~ "F", 
      TRUE ~ "missing"
    )
  ) |> 
  count(sex)
```


# 7. Transmute() instead of mutate()

- transmute adds new variables and remove existing ones. 

```{r}
penguins |> 
  mutate(sex_new = case_when(
    sex == "male" ~ "M", 
    sex == "female" ~ "F"
  )) |> 
  glimpse() 
```

```{r}
penguins |> 
  transmute(
    sex_new = case_when(
      sex == "male" ~ "M", 
      sex == "female" ~ "F"
    ), 
    ## add variables if you don't want to remove them
    species, island
  ) |> 
  glimpse()
```



# 8. Lumping levels with fct_lump_n() and fct_infreq()


```{r}
glimpse(mpg) 
```

```{r}
count(mpg, manufacturer)
```

```{r}
mpg |> 
  mutate(manufacturer = fct_infreq(manufacturer)) |> 
  count(manufacturer)
```

```{r}
mpg |> 
  mutate(manu = manufacturer |>
           fct_infreq() |>  
           fct_lump_n(n = 5)) |>
  count(manu)
```


# 9. nest_by(), and list() to model data within a data.frame

```{r}
penguins |> 
  nest_by(species) |> 
  mutate(
    mod = list(
      lm(body_mass_g ~ flipper_length_mm, data = data)
    ), 
    pred = list(predict(mod))
  ) |> 
  ungroup() 
```


# 10. reduce() lists into one 

```{r}
v <- 1:4
v

sum(v)

reduce(v, `+`)
```

```{r}
gender <- tibble(id = letters[1:6], gender = sample(c("M", "F"), 6, TRUE))
age_cm <- tibble(id = letters[1:6], age = runif(6, min = 150, max = 190))
bmi <- tibble(id = letters[1:6], bmi = runif(6, min = 15, max = 40))

gender
age_cm
bmi

l <- list(gender, age_cm, bmi)
l

reduce(l, left_join, by = "id")
```




