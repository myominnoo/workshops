---
title: "Data visualization using GGPLOT2"
subtitle: "by Myo Minn Oo" 
date: "28 Jan 2023"
format: gfm
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
```

# About

This is a one-hour workshop to understand the basics of graphs and visualizing data using `GGPLOT2` in R. This is not by any means a comprehensive course on R or data visualization, but an attempt to quickly get researchers started on creating plots using R by demonstrating an relatively simple example drawn from the literature. On a technical note regarding themes, the default theme from `ggprism` is used for the purpose of creating publication-ready graphs. 

# Recommended books

1. [R for data science (2e)](https://r4ds.hadley.nz/)
2. [Exploratory Data Analysis with R](https://bookdown.org/rdpeng/exdata/)
3. [GGPLOT2 Cheatsheet](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

# Reference & dataset:

Mohammadi, A., Bagherichimeh, S., Choi, Y. et al. Immune parameters of HIV susceptibility in the female genital tract before and after penile-vaginal sex. Commun Med 2, 60 (2022). <https://doi.org/10.1038/s43856-022-00122-7>

# Instructions:

## R & RStudio

Go to the link and follow the steps to install R & RStudio: <https://posit.co/download/rstudio-desktop/>.

Check which operating system you are using, either windows or macOS.

## Exercise files

1.  Download individual files on this link: <https://github.com/myominnoo/workshops/tree/main/2023/01/data-viz-ggplot2>\
2.  Put them in a folder.
3.  Right-click or double-click open the `R` file named `exercise.R`.
4.  Run the lines below the section `setup`.

```{r}
#| eval: false
packages <- c("tidyverse", "readxl", "ggprism")
for(package in packages){
  if(!package %in% rownames(installed.packages())){
    install.packages(pkgs = package, repos = "https://cran.rstudio.com/")
  }
  
  if(!package %in% rownames(installed.packages())){
    stop(paste("Package", package, "is not available"))
  }
}
```


# Getting started

## Checklist for creating a plot[^1]

[^1]: modified from [Exploratory Data Analysis with R](https://bookdown.org/rdpeng/exdata/)

1.  Formulate your question
2.  Identify variables (columns) needed to answer your question
3.  Read in your data
4.  Run `str()`
5.  Look at the top and the bottom of your data, `head()` and `tail()`
6.  Check your "n"s
7.  Create your plot
8.  Challenge your solution
9.  Follow up


## Anatomy of a simple graph

Most importantly, data is essential to creating a plot. It can be a linelist or summary numbers.

Basic components also include x-y axises and labels. 

```{r}
#| echo: false
mtcars %>% 
  ggplot(aes(mpg, hp)) + 
  labs(
    x = "x axis", 
    y = "y axis") + 
  ggprism::theme_prism()
```

Then, data points. 

```{r}
#| echo: false
mtcars %>% 
  ggplot(aes(mpg, hp)) + 
  geom_point() +
  labs(
    x = "x axis", 
    y = "y axis") + 
  ggprism::theme_prism()
```

Then, another axis or grouping shown by color, shape, or size. When there is a grouping, you can decide whether the legend should be shown or not, and if shown, location of the legend should be considered as well. 

```{r}
#| echo: false
mtcars %>% 
  ggplot(aes(mpg, hp, color = factor(cyl), 
             shape = factor(cyl), 
             size = factor(cyl))) + 
  geom_point() +
  labs(
    x = "x axis", 
    y = "y axis", 
    color = "legend", 
    shape = "legend", 
    size = "legend") + 
  ggprism::theme_prism() +
  theme(legend.title = element_text())
```


Lastly, we can decide to add a title. However, when you submit a paper, the plot itself is often separate from the title/subtitle and the legend. 

```{r}
#| echo: false
mtcars %>% 
  ggplot(aes(mpg, hp, color = factor(cyl), 
             shape = factor(cyl), 
             size = factor(cyl))) + 
  geom_point() +
  labs(
    title = "A simple graph", 
    x = "x axis", 
    y = "y axis", 
    color = "legend", 
    shape = "legend", 
    size = "legend") + 
  ggprism::theme_prism() +
  theme(legend.title = element_text())
```






## Getting dataset 

To download the dataset, run the following lines of codes. 

```{r}
#| echo: true
#| eval: false
## load required packages
library(tidyverse)


# Getting dataset ---------------------------------------------------------

## download dataset from the journal website
url <- "https://static-content.springer.com/esm/art%3A10.1038%2Fs43856-022-00122-7/MediaObjects/43856_2022_122_MOESM3_ESM.xlsx"
download.file(url, "43856_2022_122_MOESM3_ESM.xlsx")

```

Then, we read the dataset into R. 
```{r}
fig2 <- readxl::read_excel("43856_2022_122_MOESM3_ESM.xlsx", 
                   sheet = "Figure 2")
```

We use str(), head(), and tail() to understand the data structure
```{r}
str(fig2)
head(fig2)
tail(fig2)
```

In the current dataset, each column represents a cytokine variable. To create figure 2, what we want is two columns, `type` containing the names of cytokines and `value` containing their values. To do this, we need to change the data structure from wide format to long format. 

